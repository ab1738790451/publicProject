<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.woshen.stock.mapper.StockDayInformationMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.woshen.stock.entity.StockDayInformation">
        <id column="id" property="id" />
        <result column="code" property="code" />
        <result column="transaction_date" property="transactionDate" />
        <result column="close" property="close" />
        <result column="open" property="open" />
        <result column="today_close" property="todayClose" />
        <result column="high" property="high" />
        <result column="low" property="low" />
        <result column="average" property="average" />
        <result column="price_change" property="priceChange" />
        <result column="volume" property="volume" />
        <result column="turnover" property="turnover" />
        <result column="turnover_rate" property="turnoverRate" />
        <result column="total_worth" property="totalWorth" />
        <result column="circulation_worth" property="circulationWorth" />
        <result column="pb" property="pb" />
        <result column="spe" property="spe" />
        <result column="pe" property="pe" />
        <result column="super_inflow" property="superInflow" />
        <result column="super_outflow" property="superOutflow" />
        <result column="max_inflow" property="maxInflow" />
        <result column="max_outflow" property="maxOutflow" />
        <result column="middle_inflow" property="middleInflow" />
        <result column="middle_outflow" property="middleOutflow" />
        <result column="min_inflow" property="minInflow" />
        <result column="min_outflow" property="minOutflow" />
        <result column="total_capital_stock" property="totalCapitalStock" />
        <result column="total_revenue" property="totalRevenue" />
        <result column="circulation_capital_stock" property="circulationCapitalStock" />
        <result column="interest_rate" property="interestRate" />
        <result column="net_interest_rate" property="netInterestRate" />
        <result column="debt_ratio" property="debtRatio" />
        <result column="bonus" property="bonus" />
        <result column="price_change_type" property="priceChangeType" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, code, transaction_date, close, open, today_close, high, low, average, price_change, volume, turnover, turnover_rate, total_worth, circulation_worth, pb, spe, pe, super_inflow, super_outflow, max_inflow, max_outflow, middle_inflow, middle_outflow, min_inflow, min_outflow, total_capital_stock, total_revenue, circulation_capital_stock, interest_rate, net_interest_rate, debt_ratio, bonus, price_change_type
    </sql>

    <!--连续涨停起始日和次数-->
 <!--   <select id="selectLXZT"  resultType="com.woshen.stock.vo.StockDayInformationVO">
        SELECT mian_db.code,mian_db.transaction_date as start_date,t4.end_date,count(*)as total FROM stock_day_information mian_db
        inner JOIN (
        select t1.code,t1.transaction_date,min(t2.transaction_date)end_date from stock_day_information t1
        inner JOIN  stock_day_information t2  on
        <if test="param.priceChange != null">
            t2.price_change &lt;= #{param.priceChange} and
        </if>
        <if test="param.changeType != null">
            t2.price_change_type != #{param.changeType} and
        </if>
         t1.code = t2.code and t2.transaction_date > t1.transaction_date
        <where>
        <trim prefixOverrides="and">
            <if test="param.priceChange != null">
                and t1.price_change > #{param.priceChange,jdbcType = DECIMAL}
            </if>
            <if test="param.changeType != null">
                and t1.price_change_type = #{param.changeType}
            </if>
        </trim>
        </where>
        GROUP BY t1.code,t1.transaction_date order by t1.transaction_date asc
        )t4 on mian_db.code = t4.code and mian_db.transaction_date = t4.transaction_date
        left JOIN stock_day_information t5 on mian_db.code = t5.code  and t5.transaction_date >= mian_db.transaction_date and t5.transaction_date &lt; t4.end_date
        <where>
            <trim prefixOverrides="and">
                <if test="param.code != null">
                    and mian_db.code = #{param.code}
                </if>
                <if test="param.total != null">
                    and total &gt;= #{param.total}
                </if>
                <if test="param.startDate != null">
                    and mian_db.transaction_date &gt;= #{param.startDate}
                </if>
                <if test="param.endDate != null">
                    and t4.end_date &lt;= #{param.endDate}
                </if>
            </trim>
        </where>
        GROUP BY mian_db.code,mian_db.transaction_date,t4.end_date
        <if test="param.queryParam != null">
            <if test="param.queryParam.symbol != null and param.queryParam.total != null">
                <choose>
                    <when test='param.queryParam.symbol == "eq"'>
                        having  total = #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "gt"'>
                        having total > #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "lt"'>
                        having total &lt; #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "ge"'>
                        having total >= #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "le"'>
                        having total &lt;= #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                </choose>
            </if>
        </if>
        ORDER BY mian_db.transaction_date asc
    </select>-->

    <select id="selectLXZT"  resultType="com.woshen.stock.vo.StockDayInformationVO">
        SELECT m_db.code,sdb.start_date,date_add(sdb.end_date,INTERVAL -1 DAY)as end_date,count(*) as total FROM stock_day_information m_db
        INNER JOIN  (SELECT db.code,min(db.transaction_date)start_date,db.end_date
        from (select t1.code,t1.transaction_date,ifnull(min(t2.transaction_date),date_add(CURDATE(),INTERVAL 1 DAY))end_date from stock_day_information t1
        left JOIN  stock_day_information t2  on  t1.code = t2.code and t2.transaction_date > t1.transaction_date
        <choose>
            <when test="param.priceChange != null and param.priceChange gt 0 ">
                and t2.price_change &lt;= #{param.priceChange,jdbcType = DECIMAL}
            </when>
            <when test="param.priceChange != null and param.priceChange lt 0 ">
                and t2.price_change &gt;= #{param.priceChange,jdbcType = DECIMAL}
            </when>
            <when test="param.changeType != null">
                and t2.price_change_type != #{param.changeType}
            </when>
            <otherwise>
                and t2.price_change &lt;= 0
            </otherwise>
        </choose>
        <where>
            <if test='param.code !=null and param.code != "" '>
                t1.code = #{param.code,jdbcType = VARCHAR}
            </if>
            <trim prefixOverrides="and" suffixOverrides="and">
                <choose>
                    <when test="param.priceChange != null and param.priceChange gt 0 ">
                        and t1.price_change > #{param.priceChange,jdbcType = DECIMAL}
                    </when>
                    <when test="param.priceChange != null and param.priceChange lt 0 ">
                        and t1.price_change &lt; #{param.priceChange,jdbcType = DECIMAL}
                    </when>
                    <when test="param.changeType != null">
                        and t1.price_change_type = #{param.changeType}
                    </when>
                    <otherwise>
                        and t1.price_change > 0
                    </otherwise>
                </choose>
            </trim>
        </where>
        GROUP BY t1.code,t1.transaction_date)db
        <where>
            <trim prefixOverrides="and">
                <if test="param.startDate != null">
                    and db.transaction_date &gt;= #{param.startDate}
                </if>
                <if test="param.endDate != null">
                    and db.end_date &lt;= #{param.endDate}
                </if>
            </trim>
        </where>
        GROUP BY  db.code,db.end_date)sdb  on m_db.code = sdb.code and m_db.transaction_date >= sdb.start_date and m_db.transaction_date &lt; sdb.end_date
        GROUP BY sdb.code,sdb.start_date
        <if test="param.queryParam != null">
            <if test='param.queryParam.symbol != null and param.queryParam.total != null and param.queryParam.total != "" '>
                <choose>
                    <when test='param.queryParam.symbol == "eq"'>
                        having  total = #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "gt"'>
                        having total > #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "lt"'>
                        having total &lt; #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "ge"'>
                        having total >= #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "le"'>
                        having total &lt;= #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                </choose>
            </if>
        </if>
        ORDER BY sdb.code,sdb.start_date desc
    </select>


    <!--连续跌停起始日和次数-->
<!--    <select id="selectLXDT"  resultType="com.woshen.stock.vo.StockDayInformationVO" >
        SELECT mian_db.code,mian_db.transaction_date as start_date,t4.end_date,count(*)as total FROM stock_day_information mian_db
        inner JOIN (
        select t1.code,t1.transaction_date,min(t2.transaction_date)end_date from stock_day_information t1
        inner JOIN  stock_day_information t2 on
        <if test="param.priceChange != null">
            t2.price_change &gt;= #{param.priceChange} and
        </if>
        <if test="param.changeType != null">
            t2.price_change_type != #{param.changeType} and
        </if>
        t1.code = t2.code and t2.transaction_date > t1.transaction_date
        <where>
            <trim prefixOverrides="and">
                <if test="param.priceChange != null">
                    and t1.price_change &lt; #{param.priceChange,jdbcType = DECIMAL}
                </if>
                <if test="param.changeType != null">
                    and t1.price_change_type = #{param.changeType}
                </if>
            </trim>
        </where>
         GROUP BY t1.code,t1.transaction_date order by t1.transaction_date asc
        )t4 on mian_db.code = t4.code and mian_db.transaction_date = t4.transaction_date
        left JOIN stock_day_information t5 on mian_db.code = t5.code and t5.transaction_date >= mian_db.transaction_date and t5.transaction_date &lt; t4.end_date
        <where>
            <trim prefixOverrides="and">
                <if test="param.code != null">
                    and mian_db.code = #{param.code}
                </if>
                <if test="param.total != null">
                    and total &gt;= #{param.total}
                </if>
                <if test="param.startDate != null">
                    and mian_db.transaction_date &gt;= #{param.startDate}
                </if>
                <if test="param.endDate != null">
                    and t4.end_date &lt;= #{param.endDate}
                </if>
            </trim>
        </where>
        GROUP BY mian_db.code,mian_db.transaction_date,t4.end_date
        ORDER BY mian_db.transaction_date asc
    </select>-->

    <!--连续跌停起始日和次数-->
    <select id="selectLXDT"  resultType="com.woshen.stock.vo.StockDayInformationVO" >
        SELECT m_db.code,sdb.start_date,date_add(sdb.end_date,INTERVAL -1 DAY)as end_date,count(*) as total FROM stock_day_information m_db
        INNER JOIN  (SELECT db.code,min(db.transaction_date)start_date,db.end_date
        from (select t1.code,t1.transaction_date,ifnull(min(t2.transaction_date),date_add(CURDATE(),INTERVAL 1 DAY))end_date from stock_day_information t1
        left JOIN  stock_day_information t2  on  t1.code = t2.code and t2.transaction_date > t1.transaction_date
        <choose>
            <when test="param.priceChange != null">
                and t2.price_change &gt;= #{param.priceChange,jdbcType = DECIMAL}
            </when>
            <when test="param.changeType != null">
                and t2.price_change_type != #{param.changeType}
            </when>
            <otherwise>
                and t2.price_change &gt;= 0
            </otherwise>
        </choose>
        <where>
            <if test='param.code !=null and param.code != "" '>
                t1.code = #{param.code,jdbcType = VARCHAR}
            </if>
            <trim prefixOverrides="and" suffixOverrides="and">
                <choose>
                    <when test="param.priceChange != null">
                        and t1.price_change &lt; #{param.priceChange,jdbcType = DECIMAL}
                    </when>
                    <when test="param.changeType != null">
                        and t1.price_change_type = #{param.changeType}
                    </when>
                    <otherwise>
                        and t1.price_change &lt; 0
                    </otherwise>
                </choose>
            </trim>
        </where>
        GROUP BY t1.code,t1.transaction_date)db
        <where>
            <trim prefixOverrides="and">
                <if test="param.startDate != null">
                    and db.transaction_date &gt;= #{param.startDate}
                </if>
                <if test="param.endDate != null">
                    and db.end_date &lt;= #{param.endDate}
                </if>
            </trim>
        </where>
        GROUP BY  db.code,db.end_date)sdb  on m_db.code = sdb.code and m_db.transaction_date >= sdb.start_date and m_db.transaction_date &lt; sdb.end_date
        GROUP BY sdb.code,sdb.start_date
        <if test="param.queryParam != null">
            <if test='param.queryParam.symbol != null and param.queryParam.total != null and param.queryParam.total != "" '>
                <choose>
                    <when test='param.queryParam.symbol == "eq"'>
                        having  total = #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "gt"'>
                        having total > #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "lt"'>
                        having total &lt; #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "ge"'>
                        having total >= #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                    <when test='param.queryParam.symbol == "le"'>
                        having total &lt;= #{param.queryParam.total,jdbcType = INTEGER}
                    </when>
                </choose>
            </if>
        </if>
        ORDER BY sdb.code,sdb.start_date desc
    </select>
</mapper>
